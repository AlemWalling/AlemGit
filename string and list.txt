Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> x='they are not serious'
>>> x.capitalize()
'They are not serious'
>>> x.is lower()
  File "<stdin>", line 1
    x.is lower()
       ^
SyntaxError: invalid syntax
>>> x.islower()
True
>>> x.isalphanumeric()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'isalphanumeric'
>>> help()

Welcome to Python 3.6's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> exit
Help on Quitter in module _sitebuiltins object:

exit = class Quitter(builtins.object)
 |  Methods defined here:
 |
 |  __call__(self, code=None)
 |      Call self as a function.
 |
 |  __init__(self, name, eof)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)

help> exit(
No Python documentation found for 'exit('.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help>

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>>
>>>
>>>
>>> country = ['India','USA','UK','PAK','China']
>>> country
['India', 'USA', 'UK', 'PAK', 'China']
>>> country = [India = 1,USA = 2,UK = 3,PAK = 4,China = 5]
  File "<stdin>", line 1
    country = [India = 1,USA = 2,UK = 3,PAK = 4,China = 5]
                     ^
SyntaxError: invalid syntax
>>> country = ['India:1','USA:2','UK:3','PAK:4','China:5']
>>> country
['India:1', 'USA:2', 'UK:3', 'PAK:4', 'China:5']
>>> country.append('AFG5')
>>> country
['India:1', 'USA:2', 'UK:3', 'PAK:4', 'China:5', 'AFG5']
>>>